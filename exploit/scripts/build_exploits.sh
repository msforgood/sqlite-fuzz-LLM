#!/bin/bash -eu
# SQLite3 Exploit Build Script
# Builds all exploit programs with appropriate security flags

set -o pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
EXPLOIT_DIR="$ROOT_DIR/exploit"
SRC_DIR="$EXPLOIT_DIR/src"
BIN_DIR="$EXPLOIT_DIR/bin"
DEPS_DIR="$ROOT_DIR/build/dependencies"

# Compiler settings
CC=${CC:-clang-18}
LLVM_PROFDATA=${LLVM_PROFDATA:-llvm-profdata-18}
LLVM_COV=${LLVM_COV:-llvm-cov-18}

# Fallback compilers
command -v "$CC" >/dev/null 2>&1 || CC=clang

echo "=== SQLite3 Exploit Build System ==="
echo "WARNING: These exploits are for defensive security research only!"
echo "Compiler: $CC"
echo "Source directory: $SRC_DIR"
echo "Binary directory: $BIN_DIR"
echo ""

# Create binary directory
mkdir -p "$BIN_DIR"

# Common compilation flags
COMMON_FLAGS="-I$DEPS_DIR -g -O1 -std=c99"
SECURITY_FLAGS="-fstack-protector-strong -D_FORTIFY_SOURCE=2"
DEBUG_FLAGS="-DDEBUG -fsanitize=address,undefined -fno-omit-frame-pointer"
LINKING_FLAGS="-lpthread -ldl -lm"

# SQLite3 definitions
SQLITE_DEFS="-DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_RTREE"

echo "[+] Compiling SQLite3 amalgamation..."
if [[ ! -f "$BIN_DIR/sqlite3.o" || "${FORCE_BUILD:-0}" = "1" ]]; then
    $CC $COMMON_FLAGS $SQLITE_DEFS -c "$DEPS_DIR/sqlite3.c" -o "$BIN_DIR/sqlite3.o"
    echo "[+] SQLite3 object file created"
else
    echo "[+] Using existing SQLite3 object file"
fi

# Exploit programs
EXPLOITS=(
    "btree_overflow_exploit"
    "vdbe_uaf_exploit" 
    "format_string_exploit"
    "wal_race_exploit"
)

echo ""
echo "[+] Building exploit programs..."

for exploit in "${EXPLOITS[@]}"; do
    echo ""
    echo "--- Building $exploit ---"
    
    SRC_FILE="$SRC_DIR/${exploit}.c"
    BIN_FILE="$BIN_DIR/$exploit"
    
    if [[ ! -f "$SRC_FILE" ]]; then
        echo "[-] Source file not found: $SRC_FILE"
        continue
    fi
    
    # Build with debug flags for analysis
    echo "[+] Building debug version..."
    if $CC $COMMON_FLAGS $DEBUG_FLAGS $SECURITY_FLAGS $SQLITE_DEFS \
          -DEXPLOIT_DEBUG=1 \
          "$SRC_FILE" "$BIN_DIR/sqlite3.o" \
          $LINKING_FLAGS \
          -o "${BIN_FILE}_debug"; then
        echo "[+] Debug version: ${BIN_FILE}_debug"
        chmod +x "${BIN_FILE}_debug"
    else
        echo "[-] Debug build failed for $exploit"
        continue
    fi
    
    # Build release version for actual exploitation
    echo "[+] Building release version..."
    if $CC $COMMON_FLAGS $SECURITY_FLAGS $SQLITE_DEFS \
          "$SRC_FILE" "$BIN_DIR/sqlite3.o" \
          $LINKING_FLAGS \
          -o "$BIN_FILE"; then
        echo "[+] Release version: $BIN_FILE"
        chmod +x "$BIN_FILE"
    else
        echo "[-] Release build failed for $exploit"
        continue
    fi
    
    # Build coverage version for analysis
    echo "[+] Building coverage version..."
    if $CC $COMMON_FLAGS -fprofile-instr-generate -fcoverage-mapping $SQLITE_DEFS \
          "$SRC_FILE" "$BIN_DIR/sqlite3.o" \
          $LINKING_FLAGS \
          -o "${BIN_FILE}_coverage"; then
        echo "[+] Coverage version: ${BIN_FILE}_coverage"
        chmod +x "${BIN_FILE}_coverage"
    else
        echo "[-] Coverage build failed for $exploit"
    fi
    
    echo "[+] $exploit build completed"
done

echo ""
echo "[+] Creating exploit input directories..."
mkdir -p "$EXPLOIT_DIR/inputs/malicious_db"
mkdir -p "$EXPLOIT_DIR/inputs/overflow_payloads"
mkdir -p "$EXPLOIT_DIR/inputs/format_strings"
mkdir -p "$EXPLOIT_DIR/results"

echo ""
echo "[+] Build summary:"
echo "Built exploits:"
for exploit in "${EXPLOITS[@]}"; do
    if [[ -x "$BIN_DIR/$exploit" ]]; then
        echo "  ✓ $exploit"
        echo "    - Release: $BIN_DIR/$exploit"
        if [[ -x "$BIN_DIR/${exploit}_debug" ]]; then
            echo "    - Debug: $BIN_DIR/${exploit}_debug"
        fi
        if [[ -x "$BIN_DIR/${exploit}_coverage" ]]; then
            echo "    - Coverage: $BIN_DIR/${exploit}_coverage"
        fi
    else
        echo "  ✗ $exploit (build failed)"
    fi
done

echo ""
echo "[+] Exploit build completed!"
echo "[+] Run exploits with: ./scripts/run_exploits.sh <exploit_name>"
echo ""
echo "⚠️  SECURITY WARNING ⚠️"
echo "These exploits are for defensive security research only."
echo "Do not use for malicious purposes."
echo "Run only in controlled environments."