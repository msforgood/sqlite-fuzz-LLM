/*
** SQLite3 Vulnerability Detection Harness Header
** 식별된 취약점들을 특별히 타겟팅하는 향상된 퍼징 하니스
** 기존 하니스 보강 + 새로운 취약점 탐지 시나리오
*/

#ifndef VULNERABILITY_DETECTION_HARNESS_H
#define VULNERABILITY_DETECTION_HARNESS_H

#include "fuzz.h"
#include "sqlite3.h"
#include <pthread.h>
#include <stdatomic.h>

/* Vulnerability Detection Mode Definitions */
#define VULN_MODE_BTREE_INTEGER_OVERFLOW    0x80
#define VULN_MODE_VDBE_MEMORY_UAF          0x81  
#define VULN_MODE_FORMAT_STRING_ATTACK     0x82
#define VULN_MODE_WAL_RACE_CONDITION       0x83
#define VULN_MODE_ASSERT_BYPASS            0x84
#define VULN_MODE_MEMORY_PRESSURE          0x85
#define VULN_MODE_CORRUPTED_DB_FILE        0x86
#define VULN_MODE_CHAINED_EXPLOIT          0x87

/* Critical Values for Triggering Vulnerabilities */
#define VULN_LARGE_FREELIST_COUNT    0xFFFFFFFE
#define VULN_MAX_PAGE_COUNT          0x7FFFFFFF
#define VULN_TRIGGER_UAF_SIZE        1000000
#define VULN_FORMAT_STRING_MARKER    "%n%n%n%x%x%x"

/*
** B-Tree Integer Overflow Vulnerability Packet
** Targets: allocateBtreePage integer overflow (btree.c:6475)
*/
typedef struct {
    uint8_t scenario;           /* Test scenario selector */
    uint8_t corruption_type;    /* Type of corruption to simulate */
    uint8_t padding[2];
    uint32_t freelist_count;    /* Malicious freelist count (0xFFFFFFFE) */
    uint32_t trunk_page;        /* First trunk page number */
    uint32_t max_page_hint;     /* Page count hint */
    uint32_t leaf_count;        /* Number of leaf pages */
    uint32_t search_limit;      /* Search iteration limit */
    uint32_t boundary_values[4]; /* Boundary test values */
    uint8_t test_data[32];      /* Additional test data */
} btree_overflow_packet;

/*
** VDBE Memory Use-After-Free Vulnerability Packet  
** Targets: sqlite3VdbeMemMakeWriteable UAF (vdbemem.c:283)
*/
typedef struct {
    uint8_t scenario;           /* UAF trigger scenario */
    uint8_t mem_type;           /* Memory type (MEM_Str, MEM_Blob, etc.) */
    uint8_t alloc_pattern;      /* Memory allocation pattern */
    uint8_t realloc_trigger;    /* Reallocation trigger method */
    uint32_t initial_size;      /* Initial memory size */
    uint32_t target_size;       /* Target size for realloc */
    uint32_t pressure_level;    /* Memory pressure level */
    uint32_t fragment_count;    /* Memory fragmentation count */
    uint8_t payload_data[64];   /* Payload to trigger UAF */
} vdbe_uaf_packet;

/*
** Format String Attack Vulnerability Packet
** Targets: sqlite3_mprintf format string vulnerabilities
*/
typedef struct {
    uint8_t scenario;           /* Attack scenario */
    uint8_t injection_point;    /* Where to inject format string */
    uint8_t format_type;        /* Type of format string attack */
    uint8_t escape_attempt;     /* Escape sequence attempt */
    uint16_t string_length;     /* Length of malicious string */
    uint16_t padding;
    char format_payload[128];   /* Format string payload */
    char table_name[64];        /* Table/object name with format strings */
} format_string_packet;

/*
** WAL Race Condition Vulnerability Packet
** Targets: sqlite3BtreeCheckpoint TOCTOU (btree.c:11296)
*/
typedef struct {
    uint8_t scenario;           /* Race condition scenario */
    uint8_t thread_count;       /* Number of concurrent threads */
    uint8_t checkpoint_mode;    /* WAL checkpoint mode */
    uint8_t transaction_type;   /* Type of concurrent transaction */
    uint32_t delay_microsec;    /* Timing delay for race window */
    uint32_t operation_count;   /* Number of operations per thread */
    uint8_t sql_operations[8];  /* SQL operation types */
    uint8_t test_data[32];      /* Test data for operations */
} wal_race_packet;

/*
** Assert Bypass Vulnerability Packet
** Targets: Critical assertions that are disabled in release builds
*/
typedef struct {
    uint8_t scenario;           /* Bypass scenario */
    uint8_t target_assertion;   /* Which assertion to bypass */
    uint8_t boundary_violation; /* Type of boundary violation */
    uint8_t padding;
    uint32_t register_index;    /* VDBE register index (for register bounds) */
    uint32_t page_number;       /* Page number (for page bounds) */
    uint32_t cell_index;        /* Cell index (for cell bounds) */
    uint32_t operation_code;    /* VDBE operation code */
    uint8_t violation_data[48]; /* Data to trigger assertion failure */
} assert_bypass_packet;

/*
** Memory Pressure Vulnerability Packet
** Targets: Memory allocation failure handling
*/
typedef struct {
    uint8_t scenario;           /* Memory pressure scenario */
    uint8_t failure_point;      /* Where to simulate allocation failure */
    uint8_t recovery_test;      /* Test recovery mechanisms */
    uint8_t oom_simulation;     /* OOM simulation type */
    uint32_t alloc_count;       /* Number of allocations before failure */
    uint32_t alloc_size;        /* Size of each allocation */
    uint32_t pressure_duration; /* Duration of memory pressure */
    uint8_t test_operations[16]; /* Operations to perform under pressure */
} memory_pressure_packet;

/*
** Corrupted DB File Vulnerability Packet
** Targets: Database file parsing vulnerabilities
*/
typedef struct {
    uint8_t scenario;           /* Corruption scenario */
    uint8_t corruption_location; /* Where to corrupt (header, page, etc.) */
    uint8_t corruption_type;    /* Type of corruption */
    uint8_t checksum_fix;       /* Whether to fix checksums */
    uint32_t target_offset;     /* Offset to corrupt */
    uint32_t corruption_value;  /* Value to write */
    uint32_t page_size;         /* Database page size */
    uint8_t header_corruption[16]; /* Header corruption data */
    uint8_t page_corruption[32];   /* Page corruption data */
} corrupted_db_packet;

/*
** Chained Exploit Vulnerability Packet
** Targets: Multiple vulnerabilities in sequence
*/
typedef struct {
    uint8_t scenario;           /* Chained exploit scenario */
    uint8_t exploit_count;      /* Number of exploits in chain */
    uint8_t exploit_sequence[8]; /* Sequence of exploits to trigger */
    uint8_t timing_control;     /* Timing control for exploit chain */
    uint32_t chain_delay;       /* Delay between exploits */
    btree_overflow_packet btree_stage;   /* B-Tree overflow stage */
    vdbe_uaf_packet vdbe_stage;          /* VDBE UAF stage */
    format_string_packet format_stage;   /* Format string stage */
} chained_exploit_packet;

/* Thread-safe data structure for race condition testing */
typedef struct {
    atomic_int thread_ready_count;
    atomic_int start_flag;
    atomic_int error_count;
    pthread_barrier_t sync_barrier;
    sqlite3 *shared_db;
    char *shared_sql;
    int thread_count;
    int operation_count;
} race_test_context;

/* Function Declarations */

/* Enhanced existing harness functions */
int fuzz_btree_allocate_page_vulnerability(FuzzCtx *ctx, const uint8_t *data, size_t size);
int fuzz_vdbe_memory_uaf_vulnerability(FuzzCtx *ctx, const uint8_t *data, size_t size);

/* New vulnerability-specific harness functions */
int fuzz_format_string_attack(FuzzCtx *ctx, const uint8_t *data, size_t size);
int fuzz_wal_race_condition(FuzzCtx *ctx, const uint8_t *data, size_t size);
int fuzz_assert_bypass(FuzzCtx *ctx, const uint8_t *data, size_t size);
int fuzz_memory_pressure(FuzzCtx *ctx, const uint8_t *data, size_t size);
int fuzz_corrupted_db_file(FuzzCtx *ctx, const uint8_t *data, size_t size);
int fuzz_chained_exploit(FuzzCtx *ctx, const uint8_t *data, size_t size);

/* Helper functions */
int create_corrupted_database(const char *filename, const corrupted_db_packet *packet);
int simulate_memory_pressure(int alloc_count, size_t alloc_size);
void *race_condition_thread(void *arg);
int trigger_format_string_vulnerability(sqlite3 *db, const char *format_payload);
int force_vdbe_memory_reallocation(sqlite3 *db, size_t target_size);

/* Vulnerability detection utilities */
int detect_infinite_loop(void);
int detect_memory_corruption(void);
int detect_use_after_free(void);
int detect_format_string_exploit(void);

#endif /* VULNERABILITY_DETECTION_HARNESS_H */