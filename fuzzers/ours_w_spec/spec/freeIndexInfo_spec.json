{
  "target": { 
    "function": "freeIndexInfo",
    "fc": "query_free_index_info_001",
    "category": "Query",
    "file": "where.c",
    "line": 1640
  },
  "struct_spec": {
    "sqlite3_index_info": {
      "nConstraint": "int",
      "aConstraint": "sqlite3_index_constraint*",
      "nOrderBy": "int",
      "aOrderBy": "sqlite3_index_orderby*", 
      "aConstraintUsage": "sqlite3_index_constraint_usage*",
      "idxStr": "char*",
      "needToFreeIdxStr": "int",
      "orderByConsumed": "int",
      "estimatedCost": "double",
      "estimatedRows": "sqlite3_int64",
      "idxFlags": "int"
    },
    "hidden_index_info": {
      "pParse": "Parse*",
      "aRhs": "sqlite3_value**",
      "nRhs": "int"
    },
    "constraint_usage": {
      "argvIndex": "int",
      "omit": "unsigned char"
    }
  },
  "validation_spec": {
    "memory_align": 8,
    "constraint_count": {"min": 0, "max": 500},
    "orderby_count": {"min": 0, "max": 100},
    "rhs_value_count": {"min": 0, "max": 500},
    "parse_context_required": true,
    "database_context_required": true
  },
  "fc_mapping": {
    "source": "where.c:1640",
    "rationale": "freeIndexInfo - Critical index info cleanup with constraint value deallocation",
    "api_level": "internal"
  },
  "constraints": {
    "max_input_size": 4096,
    "min_input_size": 24,
    "endianness": "LE",
    "sqlite_version": "3.51.0",
    "requires_initialization": true
  },
  "notes": {
    "preconditions": [
      "sqlite3_initialize() called",
      "Valid sqlite3_index_info structure provided",
      "Valid database connection context",
      "Valid Parse context in HiddenIndexInfo",
      "Constraint RHS values properly allocated"
    ],
    "side_effects": [
      "All constraint RHS values freed via sqlite3ValueFree",
      "Index string freed via freeIdxStr call",
      "Complete sqlite3_index_info structure freed",
      "HiddenIndexInfo cleanup performed",
      "Database memory context updated"
    ],
    "error_conditions": [
      "Assert failure: pIdxInfo == NULL",
      "Assert failure: pHidden->pParse == NULL", 
      "Assert failure: pHidden->pParse->db != db",
      "Memory corruption if constraint array invalid"
    ]
  }
}