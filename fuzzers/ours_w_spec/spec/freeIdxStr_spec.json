{
  "target": { 
    "function": "freeIdxStr",
    "fc": "query_free_idx_str_001",
    "category": "Query",
    "file": "where.c",
    "line": 1628
  },
  "struct_spec": {
    "sqlite3_index_info": {
      "nConstraint": "int",
      "aConstraint": "sqlite3_index_constraint*",
      "nOrderBy": "int", 
      "aOrderBy": "sqlite3_index_orderby*",
      "aConstraintUsage": "sqlite3_index_constraint_usage*",
      "idxStr": "char*",
      "needToFreeIdxStr": "int",
      "orderByConsumed": "int",
      "estimatedCost": "double",
      "estimatedRows": "sqlite3_int64",
      "idxFlags": "int"
    },
    "index_constraint": {
      "iColumn": "int",
      "op": "unsigned char",
      "usable": "unsigned char"
    }
  },
  "validation_spec": {
    "memory_align": 8,
    "constraint_count": {"min": 0, "max": 500},
    "orderby_count": {"min": 0, "max": 100},
    "idx_string_length": {"min": 0, "max": 10000},
    "constraint_ops": ["EQ", "GT", "LE", "LT", "GE", "MATCH", "LIKE", "GLOB", "REGEXP", "NE", "ISNOT", "ISNOTNULL", "ISNULL", "IS", "LIMIT", "OFFSET"],
    "flags": ["SCAN_UNIQUE", "QUERY_PLANNER", "ESTIMATED_COST", "ESTIMATED_ROWS"]
  },
  "fc_mapping": {
    "source": "where.c:1628",
    "rationale": "freeIdxStr - Critical index string cleanup for virtual table operations",
    "api_level": "internal"
  },
  "constraints": {
    "max_input_size": 2048,
    "min_input_size": 16,
    "endianness": "LE",
    "sqlite_version": "3.51.0",
    "requires_initialization": true
  },
  "notes": {
    "preconditions": [
      "sqlite3_initialize() called",
      "Valid sqlite3_index_info structure provided",
      "needToFreeIdxStr flag properly set",
      "idxStr pointer validation required"
    ],
    "side_effects": [
      "Index string memory freed if needToFreeIdxStr is set",
      "idxStr pointer set to NULL",
      "needToFreeIdxStr flag reset to 0",
      "Virtual table index cleanup"
    ],
    "error_conditions": [
      "NULL pointer access if pIdxInfo is invalid",
      "Double-free protection via needToFreeIdxStr flag",
      "Memory leak if flag not properly managed"
    ]
  }
}