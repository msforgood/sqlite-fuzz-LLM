{
  "target": { 
    "function": "sqlite3BtreeIntegrityCheck",
    "fc": "btree_integrity_001",
    "category": "B-Tree",
    "subcategory": "Integrity Verification",
    "description": "Critical B-Tree integrity checking function with high crash potential"
  },
  "functions_list": [
    "sqlite3BtreeIntegrityCheck"
  ],
  "struct_spec": {
    "integrity_check_input": {
      "pgno_root": "uint32_t",
      "check_flags": "uint8_t",
      "max_errors": "uint8_t",
      "corruption_type": "uint8_t",
      "test_data": "uint8_t[13]",
      "description": "Integrity check parameters with corruption simulation"
    }
  },
  "validation_spec": {
    "memory_align": 8,
    "pgno_range": {"min": 1, "max": 4294967295},
    "max_errors_range": {"min": 1, "max": 100},
    "check_flags_range": {"min": 0, "max": 15}
  },
  "fc_mapping": {
    "source": "btree.c:11102",
    "rationale": "sqlite3BtreeIntegrityCheck - Critical integrity verification with corruption detection",
    "api_level": "internal",
    "complexity": "high",
    "call_frequency": "low"
  },
  "constraints": {
    "max_input_size": 20,
    "min_input_size": 20,
    "endianness": "LE",
    "sqlite_version": "3.51.0",
    "requires_initialization": true
  },
  "notes": {
    "preconditions": [
      "sqlite3_initialize() called",
      "Valid database context with tables",
      "B-Tree structures accessible"
    ],
    "side_effects": [
      "Database integrity verification",
      "Error message generation",
      "Memory allocation for error strings"
    ],
    "error_conditions": [
      "SQLITE_CORRUPT: Database corruption detected",
      "SQLITE_NOMEM: Out of memory during check",
      "SQLITE_IOERR: I/O error during verification"
    ],
    "fuzzing_strategy": [
      "Corruption simulation scenarios",
      "Memory pressure during checks",
      "Invalid page reference testing",
      "Error handling boundary conditions"
    ]
  }
}